<?php

namespace Alians\StoneBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MaterialRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */ 

class MaterialRepository extends EntityRepository
{
    /**
    *Get materials
    * @return array of object Material or false if fail
    **/
    public function getMaterials()
    {
        $materials = $this->findAll();
        if(!$materials) return false;
        return $materials;
    }//end func
    
    /**
    *Get materials
    * @return array of object Material or false if fail
    **/
    public function getAll()
    {
        $materials = $this->findAll();
        if(!$materials) return false;
        return $materials;
    }//end func
    
    /**
    *Get materials
    * @return array of object Material or false if fail
    **/
    public function getMaterials2()
    {
        $items = $this->findAll();
        if(!$items) return false;
        $materials = array();
        foreach ( $items as $material )
        {
            $materials[] = array( 
                                'count' => $this->countMaterialsByCategory($material->getSlug()),
                                'material'=>$material
                                );
        }
        return $materials;
    }//end func
    
    /**
    *Get material
    * @param int $id Id of material
    * @return object Material or false if fail
    **/
    public function getMaterial($slug)
    {
        $material = $this->findOneBy(array('slug'=>$slug));
        if($material) return $material;
        return false;
    }//end func
    
    /**
    *Get material
    * @param int $id Id of material
    * @return object Material or false if fail
    **/
    public function getMaterialsForMenu()
    {
        $items = $this->findBy(array('showmenu'=>true));
        if(!$items) return false;
        $materials = array();
        foreach ( $items as $material )
        {
            $materials[] = array( 
                                'count' => $this->countMaterialsByCategory($material->getSlug()),
                                'material'=>$material
                                );
        }
        return $materials;
    }//end func
    
    /**
    *Get main material
    * @param int $id Id of material
    * @return object Material or false if fail
    **/
    public function getMainMaterials()
    {
        $all = $this->findAll();
        if(!$all) return false;
        $materials = array();
        foreach ( $all as $material )
        {
            if ( $material->getCategory() == '.' )
                $materials[] = $material;
        }
        return $materials;
    }//end func
    
    public function getMaterialsByCategory($slug)
    {
        $material = $this->findOneBy(array('slug'=>$slug));
        if (!$material) return false;
        $slug = $material->getSlug();
        $materials = $this->findBy(array('category'=>$slug));
        if (!$materials) return false;
        return $materials; 
    }//end func
    
    public function countMaterialsByCategory($slug)
    {
        if ( $slug == '.' || $slug == '..' ) return 0;
        $material = $this->findOneBy(array('slug'=>$slug));
        if (!$material) return 0;
        $slug = $material->getSlug();
        $materials = $this->findBy(array('category'=>$slug));
        if (!$materials) return 0;
        return count( $materials ); 
    }//end func
    
    public function getMaterialForAdmin()
    {
        $all = $this->findAll();
        if(!$all) return false;
        $materials = array();
        foreach ( $all as $material )
        {
            if ( $material->getCategory() == '..' )
                $materials[] = $material;
        }
        return $materials;
    }//end func
    
     public function getMaterialForOrder()
    {
        $all = $this->findAll();
        if(!$all) return false;
        $materials = array();
        foreach ( $all as $material )
        {
            if ( $material->getCategory() != '..' )
                $materials[] = $material;
        }
        return $materials;
    }//end func
    
}
